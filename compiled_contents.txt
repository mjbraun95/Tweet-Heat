.project:
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>HackED-beta</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.python.pydev.PyDevBuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.python.pydev.pythonNature</nature>
	</natures>
</projectDescription>


.pydevproject:
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?eclipse-pydev version="1.0"?><pydev_project>
<pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER">Default</pydev_property>
<pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION">python interpreter</pydev_property>
</pydev_project>


heatMap.html:
<!DOCTYPE html>
<head>    
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <script>L_PREFER_CANVAS=false; L_NO_TOUCH=false; L_DISABLE_3D=false;</script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.2.0/dist/leaflet.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.2.0/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css"/>
    <link rel="stylesheet" href="https://rawgit.com/python-visualization/folium/master/folium/templates/leaflet.awesome.rotate.css"/>
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    
<<<<<<< HEAD
    <style>#map_cebc3f830b904b5eb8df4b5ed3d7cddb {
=======
    <style>#map_4fbfd257dcf249c6b4785b73a55fee06 {
>>>>>>> refs/remotes/origin/master
        position: relative;
        width: 100.0%;
        height: 100.0%;
        left: 0.0%;
        top: 0.0%;
        }
    </style>
    <script src="https://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js"></script>
</head>
<body>    
    
<<<<<<< HEAD
    <div class="folium-map" id="map_cebc3f830b904b5eb8df4b5ed3d7cddb" ></div>
=======
    <div class="folium-map" id="map_4fbfd257dcf249c6b4785b73a55fee06" ></div>
>>>>>>> refs/remotes/origin/master
</body>
<script>    
    
    
        var bounds = null;
    

<<<<<<< HEAD
    var map_cebc3f830b904b5eb8df4b5ed3d7cddb = L.map(
        'map_cebc3f830b904b5eb8df4b5ed3d7cddb', {
=======
    var map_4fbfd257dcf249c6b4785b73a55fee06 = L.map(
        'map_4fbfd257dcf249c6b4785b73a55fee06', {
>>>>>>> refs/remotes/origin/master
        center: [53.540996, -113.497746],
        zoom: 10,
        maxBounds: bounds,
        layers: [],
        worldCopyJump: false,
        crs: L.CRS.EPSG3857,
        zoomControl: true,
        });

    
    
<<<<<<< HEAD
    var tile_layer_0932467e2f394041b504b62f4c0c9a94 = L.tileLayer(
=======
    var tile_layer_8a4a5f2f18f74219be7549a9ec6324d5 = L.tileLayer(
>>>>>>> refs/remotes/origin/master
        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        {
        "attribution": null,
        "detectRetina": false,
        "maxNativeZoom": 18,
        "maxZoom": 18,
        "minZoom": 0,
        "noWrap": false,
        "subdomains": "abc"
<<<<<<< HEAD
}).addTo(map_cebc3f830b904b5eb8df4b5ed3d7cddb);
    
            var heat_map_b161cf15a7c643d595d5d14503bdca60 = L.heatLayer(
                [[33.77319, -117.904717], [32.563973, -97.078573], [39.614151, -105.109815], [35.995476, -95.774704], [37.329932, -122.129474], [33.435864, -111.960775], [25.70904, -80.321683], [42.255085, -83.288056], [31.332246, -114.818269], [29.805879, -90.131291], [40.40379, -86.233407], [33.670765, -116.421818], [44.991758, -93.208104], [37.494635, -122.073103], [35.917793, -115.158143], [33.704538, -118.668404], [44.51771, -69.743134], [32.528832, -124.482003], [32.528832, -124.482003], [36.050709, -119.592236], [32.284593, -86.418059], [41.643749, -72.826538], [30.127892, -97.928935], [34.578426, -86.785881], [32.04683, -83.353955], [33.752879, -84.321948], [41.602335, -91.577582], [33.704538, -118.668404], [40.683935, -74.026675], [34.994192, -90.135782], [35.421216, -82.681852], [37.771743, -88.097892], [33.704538, -118.668404], [33.85216, -117.523867], [41.199674, -82.649491], [39.194892, -80.519697], [42.430703, -87.885527], [29.840708, -97.993537], [33.704538, -118.668404], [36.992427, -109.060257], [43.60222, -79.888911], [49.08609, -123.304549], [40.541722, -73.962582], [45.410095, -73.972965], [36.970298, -91.51308], [47.300531, -122.210758], [33.788913, -118.017789], [32.569477, -97.538285], [41.644102, -87.940033], [39.947426, -82.950022], [33.647503, -84.576827], [49.219352, -122.893434], [26.244127, -98.225807], [28.388218, -81.507905], [32.81088, -97.15606], [39.639941, -84.276145], [34.063734, -117.854065], [34.086988, -117.704483], [33.462988, -84.383382], [32.582128, -117.117116], [40.495865, -74.255641], [32.69623, -96.491676], [40.683935, -74.026675], [30.520359, -96.37703], [33.319945, -111.979047], [36.540739, -83.67529], [33.685344, -116.301227], [40.541722, -73.962582], [36.960216, -76.62797], [39.162427, -76.80445], [30.127892, -97.928935], [40.477383, -79.76259]],
=======
}).addTo(map_4fbfd257dcf249c6b4785b73a55fee06);
    
            var heat_map_c4ecd981fad04505989437a5e2360df8 = L.heatLayer(
                [[53.60100728, -113.49972797], [43.78865482, -110.9577686], [44.94727, -93.09707], [45.5038, -73.5744], [47.16, -122.51], [51.1667, -115.567], [47.2410428, -122.40005186], [45.5, -73.5167], [44.0519, -123.087], [49.35087662, -123.25325915], [49.25, -123.11], [44.2167, -114.938], [43.1388, -77.6909], [43.7166, -79.3407], [45.3677, -122.843], [45.29, -75.78], [51.19091, -114.46804], [51.13906229, -113.93970113], [43.83264, -79.44034], [45.57353889, -122.69246944], [42.65073, -73.75325], [50.6759, -120.33898], [43.64875, -79.39763], [43.63845, -79.38504], [42.91888889, -112.40638889], [48.82444444, -123.72138889], [45.583674, -122.543899], [43.89666667, -78.87388889], [44.9161, -93.1014], [43.92055556, -78.68888889], [47.60864, -122.33769], [45.5167, -73.65], [47.5692, -122.6548], [47.0991, -122.638], [44.977753, -93.2650108], [44.97504231, -93.23219554], [47.68, -122.21], [46.8667, -71.2667], [45.52371, -122.674621], [47.0468, -122.926], [45.518237, -122.678249], [48.4287, -123.3645], [45.04892257, -122.97495467]],
>>>>>>> refs/remotes/origin/master
                {
                    minOpacity: 0.2,
                    maxZoom: 1,
                    max: 1.0,
                    radius: 15,
                    blur: 15,
                    gradient: null
                    })
<<<<<<< HEAD
                .addTo(map_cebc3f830b904b5eb8df4b5ed3d7cddb);
=======
                .addTo(map_4fbfd257dcf249c6b4785b73a55fee06);
>>>>>>> refs/remotes/origin/master
        
</script>

mapGen.py:
import folium
import numpy as num
import random
import sqlite3, time
from folium.plugins import HeatMap


connection = None
cursor = None

def connect(path):
    global connection, cursor

    connection = sqlite3.connect(path)
    cursor = connection.cursor()
    return

def get_data_points():
    path="./All_tweets.db"
    connect(path)      
    
    query = "SELECT lat, lon FROM tweets ORDER BY date DESC LIMIT 300"
    tweets = cursor.execute(query)
    all_tweets = [tweet for tweet in tweets]
    
    print(len(all_tweets))
    print(all_tweets)
    #print(type(all_tweets[0][0]))
    
    connection.close()
    
    return all_tweets



#createHeatMap(heatArray)

def createHeatMap(heat_Map_Array, start_lat=53.540996, start_lon=-113.497746, start_zoom = 4):
    # generate the map

    mainMap = folium.Map(
        location=[start_lat, start_lon],
        zoom_start=start_zoom,
        no_wrap=True,
        world_copy_jump=True,

    )


    # add all layers
    """
    folium.TileLayer('Mapbox Bright').add_to(mainMap)
    folium.TileLayer('Mapbox Control Room').add_to(mainMap)
    folium.TileLayer('Stamen Toner').add_to(mainMap)
    folium.TileLayer('openstreetmap').add_to(mainMap)
    folium.TileLayer('Stamen Terrain').add_to(mainMap)
    """

    # add layer controller
    # folium.LayerControl().add_to(mainMap)

    pingPoints = {'lat': [], 'lon': []}

    #print(pingPoints)
    #print(list(zip(pingPoints['lat'], pingPoints['lon'])))

    #heat = HeatMap(
            #heat_Map_Array,
            #min_opacity=0.2,
            #max_val=1.0,
            #radius=15, blur=15,
            #max_zoom=1,)
    
    heat = HeatMap(
        heat_Map_Array, radius=15)

    mainMap.add_child(heat)

    # heatMap output
    mainMap.save('static/heatMap.html')

if __name__ == "__main__":
    #createHeatMap()
    prev = -1
    curr = 0
    time.sleep(3)
    while curr > prev:
        heatArray = get_data_points()
        #createHeatMap(heatArray,53.540996,-113.497746)
        createHeatMap(heatArray,39,-98)
        time.sleep(2)
        prev = curr
        curr = len(heatArray)

mapGen.pyc:
у
>ер[c           @   sW   d  d l  Z  d  d l Z d  d l Z d  d l m Z d Д  Z e d k rS e Г  n  d S(   i€€€€N(   t   HeatMapc          C   s7  i d d 6d d 6}  t  j d |  d |  d g d d Г } i g  d 6g  d 6} xf t d	 Г D]X } | d j |  d t j d
 d Г d Г | d j |  d t j d
 d Г d Г q[ W| GHt t | d | d Г Г GHt t t | d | d Г Г d
 d d d d d d d d d Г} | j	 | Г | j
 d Г d  S(   Ng'Ґ_[?≈J@t   lati    gјн	џ_\@t   lont   locationt
   zoom_starti
   iу  iЬ€€€id   g{ЃGбzД?t   min_opacitygЪЩЩЩЩЩ…?t   max_valg      р?t   radiusi   t   blurt   max_zoomi   s   heatMap.htmlgјн	џ_\ј(   t   foliumt   Mapt   ranget   appendt   randomt	   randranget   listt   zipR    t	   add_childt   save(   t   edt   mainMapt
   pingPointst   it   heat(    (    sF   /media/sf_CMPUT_274/Hackathons/HackED-beta.github.io/scripts/mapGen.pyt
   createHeatMap   s    &)- 	
t   __main__(	   R
   t   numpyt   numR   t   folium.pluginsR    R   t   __name__t   creatHeatMap(    (    (    sF   /media/sf_CMPUT_274/Hackathons/HackED-beta.github.io/scripts/mapGen.pyt   <module>   s   	&

README.md:
# HackED-beta

What our program does is it crawls through Twitter data and receives live tweets from all over North America. 
Of all these tweets collected, roughly 10 percent of have location data with it. The program then puts all of 
these latitude and longitude coordinate points on a map, and generates a heat map where in the highest traffic 
locations around North America. 


run_them.bat:
start python "C:\Users\Alex\Documents\Programming\HackED beta\HackED-beta\stream_twitter.py"
start python "C:\Users\Alex\Documents\Programming\HackED beta\HackED-beta\mapGen.py"

sadas:
from flask import Flask, send_file, render_template
from flask_socketio import SocketIO, emit
import mapGen


app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

@socketio.on('mapUpdateEvent')
def map():
    mapGen.createHeatMap()
    print("I ran bitches")

    return send_file('heatMap.html', mimetype='text/html')

@app.route('/')
def index():
    return render_template("index.html")

if __name__ == "__main__":
    socketio.run(app)
    #app.run(debug = True)

stream_twitter.py:
import tweepy, time, sqlite3
from pprint import pprint

consumer_key='9DylZjpQIUOuRDVev7BRlShUS'
consumer_secret='WvDaTcYz3c70xgsadKBdi9BrfjpQEiymiOrPsg2KNVnZppnQo6'
access_token='1063915931066261504-FwDnh5XsrB0Hb0dVzsbfW0omgyMrKS'
access_token_secret='BrNAzfPwQGzb1rAuJCBC2EiC6HvFEXpVFBh9AZEWrpoTy'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

tweets = []
ids = []
just_coords = []
all_coords = []
loc_centres = {}

#connection = None
#cursor = None

def connect(path):
    global connection, cursor

    connection = sqlite3.connect(path)
    cursor = connection.cursor()
    cursor.execute(' PRAGMA foreign_keys=ON; ')
    connection.commit()
    return

def define_tables():
    global connection, cursor

    cursor.execute('''drop table if exists tweets''')

    comic_query=   '''
                        CREATE TABLE IF NOT EXISTS tweets (
                                    tweet_id INT,
                                    date INT,
                                    lat TEXT,
                                    lon TEXT,
                                    PRIMARY KEY (tweet_id)
                                    );
                    '''
    
    cursor.execute(comic_query)

def add_tweet(id, date, coords):
    
    query = "INSERT INTO tweets (tweet_id, date, lat, lon) VALUES (?,?,?,?)"
    cursor.execute(query, [id, date] + coords)


def find_center(place):
    if place.id not in loc_centres.keys():
        cor_list = place.bounding_box.coordinates[0]
        lat_list = [x[0] for x in cor_list]
        lon_list = [x[1] for x in cor_list]
        
        c_x = (max(lat_list) + min(lat_list))/2.0
        c_y = (max(lon_list) + min(lon_list))/2.0
        
        
        loc_centres[place.id] = [c_y, c_x]
    
    return loc_centres[place.id]


class MyStreamListener(tweepy.StreamListener):

    def __init__(self):
        self.api = api or API()
        path="./All_tweets.db"
        self.connect(path)    
        self.define_tables()
    
    def connect(self,path):
        self.connection = sqlite3.connect(path)
        self.cursor = self.connection.cursor()
        self.cursor.execute(' PRAGMA foreign_keys=ON; ')
        self.connection.commit()
        return
    
    def define_tables(self):
        self.cursor.execute('''drop table if exists tweets''')
    
        comic_query=   '''
                            CREATE TABLE IF NOT EXISTS tweets (
                                        tweet_id INT,
                                        date INT,
                                        lat REAL,
                                        lon REAL,
                                        PRIMARY KEY (tweet_id)
                                        );
                        '''
        
        self.cursor.execute(comic_query)
    
    def add_tweet(self, id, date, coords):
        
        query = "INSERT INTO tweets (tweet_id, date, lat, lon) VALUES (?,?,?,?)"
        self.cursor.execute(query, [id, date] + coords)    
    
    def on_status(self, status):
        

        if status.place:
            tweets.append(status)
            
            if status.id not in ids:
                ids.append(status.id)
            
                print(status.author.name, status.text, status.place.full_name, '==========', sep='\n')
                
                if status.coordinates:
                    just_coords.append(tuple(status.coordinates['coordinates'][::-1]))
                    all_coords.append(tuple(status.coordinates['coordinates'][::-1]))
                    
                    #self.add_tweet(status.id, int(status.created_at.timestamp()), status.coordinates['coordinates'][::-1])
                    self.add_tweet(status.id, int(status.created_at.timestamp()), find_center(status.place))
                    self.connection.commit()
                else:
                    all_coords.append(tuple(find_center(status.place)))
                    
                    self.add_tweet(status.id, int(status.created_at.timestamp()), find_center(status.place))
                    self.connection.commit()
                
                
                #if len(ids) >= 100:
                    #self.connection.close()
                    #return False
    
    def on_error(self, status_code):
        print(status_code)


def start_stream():
    
    
    myStreamListener = MyStreamListener()
    myStream = tweepy.Stream(auth = api.auth, listener=myStreamListener)
    
    
    #North America
    myStream.filter(locations=[-168.12,25.78,-51.54,71.61])
    
    #Canada
    #myStream.filter(locations=[-136.90,43.67,-53.65,60.16], async= True)
    
    #AB
    #myStream.filter(locations=[-119.74,49.16,-110.52,59.85], async= True)
    
    #NY & LA
    #myStream.filter(locations=[-122.75,36.8,-121.75,37.8,-74,40,-73,41], async= True)
    
    #print('BLA BLA BLA')
    #time.sleep(3)
    #print('HA HA HA')


if __name__ == "__main__":
    start_stream()

testflask.py:
from flask import Flask, send_file, render_template
from flask_socketio import SocketIO, emit
import mapGen
from subprocess import Popen
import stream_twitter
import os

heatArray = []
empty = []

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

@socketio.on('mapUpdateEvent')
def generateMap(lat,lon,zoom):
    print("I got called")
    
    heatArray = mapGen.get_data_points()

    #  53.540996,0-113.497746
    mapGen.createHeatMap(heatArray, lat, lon, zoom )
    emit('mapCreated')

@app.route('/')
def index():
    return render_template("index.html")

if __name__ == '__main__':
    p=Popen(['python', '.\stream_twitter.py'], shell=True)
    socketio.run(app)
    

testflask.pyc:
у
*хр[c           @   s≥   d  d l  m Z m Z m Z d  d l m Z m Z d  d l Z e e Г Z	 d e	 j
 d <e e	 Г Z e j d Г d Д  Г Z
 e	 j d Г d	 Д  Г Z e d
 k rѓ e j e	 Г n  d S(   i€€€€(   t   Flaskt	   send_filet   render_template(   t   SocketIOt   emitNs   secret!t
   SECRET_KEYt   mapUpdateEventc           C   s   t  j Г  d GHt d d d ГS(   Ns
   I ran bitchess   heatMap.htmlt   mimetypes	   text/html(   t   mapGent
   createHeatMapR   (    (    (    sA   /media/sf_CMPUT_274/Hackathons/HackED-beta.github.io/testflask.pyt   map
   s    
t   /c           C   s
   t  d Г S(   Ns
   index.html(   R   (    (    (    sA   /media/sf_CMPUT_274/Hackathons/HackED-beta.github.io/testflask.pyt   index   s    t   __main__(   t   flaskR    R   R   t   flask_socketioR   R   R   t   __name__t   appt   configt   socketiot   onR
   t   routeR   t   run(    (    (    sA   /media/sf_CMPUT_274/Hackathons/HackED-beta.github.io/testflask.pyt   <module>   s   


testflaskSocket.py:
from flask import Flask, send_file, render_template
from flask_socketio import SocketIO, emit
import mapGen


app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

@socketio.on('mapUpdateEvent')
def map():
    mapGen.createHeatMap()
    print("I ran bitches")

    return send_file('heatMap.html', mimetype='text/html')

@app.route('/sms', methods=['GET','POST'])
def index():
    return render_template("index.html")
if __name__ == "__main__":
    socketio.run(app)
    #app.run(debug = True)

Twitter-test.py:
import tweepy
from urllib.request import urlopen
from urllib.parse import quote


consumer_key='9DylZjpQIUOuRDVev7BRlShUS'
consumer_secret='WvDaTcYz3c70xgsadKBdi9BrfjpQEiymiOrPsg2KNVnZppnQo6'
access_token='1063915931066261504-FwDnh5XsrB0Hb0dVzsbfW0omgyMrKS'
access_token_secret='BrNAzfPwQGzb1rAuJCBC2EiC6HvFEXpVFBh9AZEWrpoTy'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

class MyStreamListener(tweepy.StreamListener):
    def on_status(self, status):
        print(status.text)
        print(status.coordinates)

myStreamListener = MyStreamListener()
myStream = tweepy.Stream(auth = api.auth, listener=myStreamListener())

myStream.filter(locations=[53.457912,-113.617431,53.619420,-113.371607])

## Bounding box coordingates: tweet.place.bounding_box.coordinates[0]

tweets = api.home_timeline()
search = api.search(rpp=20, geocode="34.2920145,-83.8976776,10km")

#for tweet in tweepy.Cursor(api.search, geocode="34.2920145,-83.8976776,10km").items(10):
    #print(tweet)

results = []
for tweet in tweepy.Cursor(api.search, geocode="53.540996,-113.497746,26km").items(1000):
    results.append(tweet)

filtered = [y for y in results if (y.place or y.coordinates)]


#tweets = api.user_timeline(351978460, count=5)
#for tweet in tweets:
    #print(tweet.place)


static/heatMap.html:
<!DOCTYPE html>
<head>    
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <script>L_PREFER_CANVAS=false; L_NO_TOUCH=false; L_DISABLE_3D=false;</script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.2.0/dist/leaflet.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.2.0/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css"/>
    <link rel="stylesheet" href="https://rawgit.com/python-visualization/folium/master/folium/templates/leaflet.awesome.rotate.css"/>
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    
    <style>#map_7bf71ae5bc4c4db7b88ad359c65bf2da {
        position: relative;
        width: 100.0%;
        height: 100.0%;
        left: 0.0%;
        top: 0.0%;
        }
    </style>
    <script src="https://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js"></script>
</head>
<body>    
    
    <div class="folium-map" id="map_7bf71ae5bc4c4db7b88ad359c65bf2da" ></div>
</body>
<script>    
    
    
        var bounds = null;
    

    var map_7bf71ae5bc4c4db7b88ad359c65bf2da = L.map(
        'map_7bf71ae5bc4c4db7b88ad359c65bf2da', {
        center: [40.94671366508002, -89.52538847923279],
        zoom: 4,
        maxBounds: bounds,
        layers: [],
        worldCopyJump: true,
        crs: L.CRS.EPSG3857,
        zoomControl: true,
        });

    
    
    var tile_layer_1c43b56f0ad54207957b86cdfe863c87 = L.tileLayer(
        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        {
        "attribution": null,
        "detectRetina": false,
        "maxNativeZoom": 18,
        "maxZoom": 18,
        "minZoom": 0,
        "noWrap": true,
        "subdomains": "abc"
}).addTo(map_7bf71ae5bc4c4db7b88ad359c65bf2da);
    
            var heat_map_3096002d0a3d471baf1a5860fc0cd515 = L.heatLayer(
                [[40.990215, -73.8729485], [45.517652, -122.770673], [39.261002, -76.7415], [37.6629475, -121.877735], [31.1688935, -100.0768885], [35.84742, -86.40961], [34.149352, -77.907489], [32.8429285, -86.6282315], [48.23281, -101.26794000000001], [32.9961685, -87.60996800000001], [41.8239535, -87.846586], [32.931834, -97.079654], [42.3781975, -71.112377], [36.2251495, -80.3023365], [38.4522175, -122.6761085], [33.617638, -117.874032], [32.6782075, -83.1738665], [34.721886, -92.342322], [39.284712999999996, -76.62048200000001], [40.766601, -74.214139], [32.6782075, -83.1738665], [39.78035800000001, -84.200366], [32.595264, -96.9596635], [34.0207895, -118.4119065], [34.443805499999996, -86.940582], [32.364145, -86.24472850000001], [44.900818, -89.5694915], [29.838495, -95.44648649999999], [29.972668, -95.19268], [43.052606999999995, -76.1288105], [34.0207895, -118.4119065], [33.456503999999995, -88.8216885], [40.780709, -73.9685415], [39.7672235, -86.3918345], [44.1454365, -120.58340150000001], [38.903459999999995, -76.87085350000001], [39.713563, -104.92209349999999], [42.717573, -73.9409845], [40.6787035, -111.99744100000001], [35.3469015, -119.02516299999999], [32.6782075, -83.1738665], [32.810012, -117.104989], [34.0207895, -118.4119065], [36.200008, -86.791549], [28.6544085, -81.3183475], [32.7799665, -97.28591349999999], [41.1562815, -73.4409395], [43.5232425, -70.38929949999999], [40.774339, -74.399048], [40.716493, -73.998188], [28.121993, -105.514547], [39.5830385, -86.1453205], [53.2375045, -113.7819775], [32.230987, -90.1580165], [51.027664, -114.087851], [35.4828435, -97.552161], [41.160250500000004, -81.3504345], [29.417501, -98.5406515], [30.083158, -95.99017549999999], [32.633767, -117.02246299999999], [42.636248, -71.326858], [42.424952, -71.11081999999999], [36.0609645, -115.135165], [32.5369, -92.6338345], [34.0207895, -118.4119065], [38.408334999999994, -81.48806450000001], [35.9824705, -83.9638415], [34.580925, -87.01055099999999], [34.0207895, -118.4119065], [42.794954, -71.22556750000001], [33.6636085, -117.90564549999999], [47.064528, -122.923516], [39.305508, -76.7538045], [44.900818, -89.5694915], [35.296183, -106.662024], [39.7795625, -86.1429225], [27.698681999999998, -83.804475], [29.838495, -95.44648649999999], [34.0060125, -118.40899], [28.941865999999997, -106.1628985], [40.659491, -73.53085899999999], [37.2691755, -119.30660750000001], [40.0048655, -75.117998], [29.982601, -90.011008], [29.7936785, -95.11855], [36.1247905, -83.857519], [46.3151735, -120.0056535], [40.8503475, -73.8494415], [30.323345500000002, -97.754724], [41.086917, -85.1700515], [40.0048655, -75.117998], [39.1450235, -75.3864605], [37.7706565, -122.4359785], [42.0624705, -87.9314125], [30.323345500000002, -97.754724], [37.765135, -87.1023995], [37.2654925, -77.3971595], [42.036939000000004, -71.683502], [40.655138, -73.9487755], [41.1179365, -77.60468399999999], [32.768591, -96.994833], [36.232915, -115.223125], [47.614817, -122.3306025], [41.105271, -80.63954050000001], [26.721896, -80.1226195], [40.780709, -73.9685415], [32.810012, -117.104989], [31.1688935, -100.0768885], [29.982601, -90.011008], [39.67909349999999, -75.75609850000001], [40.6708795, -73.8311875], [41.086917, -85.1700515], [41.086917, -85.1700515], [32.6782075, -83.1738665], [34.0207895, -118.4119065], [41.588432, -83.565295], [37.5236445, -121.979527], [30.606551, -81.5896905], [38.886623, -94.808085], [49.257639, -123.123581], [34.2904615, -77.84080750000001], [37.0508965, -76.36227600000001], [33.7671945, -84.433106], [45.3451245, -122.5957415], [25.7823535, -80.2333285], [40.6708795, -73.8311875], [39.0311595, -77.4771055], [26.1492485, -97.9110215], [40.0521585, -77.5242255], [27.698681999999998, -83.804475], [39.284712999999996, -76.62048200000001], [35.209058999999996, -80.8467855], [32.6782075, -83.1738665], [40.780709, -73.9685415], [34.580925, -87.01055099999999], [35.1704985, -79.861034], [33.121483999999995, -117.2879235], [42.3527865, -83.099288], [38.837503999999996, -106.134797], [32.461107, -93.80943400000001], [45.630589, -122.5889745], [47.689242, -114.14855299999999], [40.780709, -73.9685415], [41.8335845, -87.732013], [40.431388999999996, -79.9806895], [32.668218, -114.58475250000001], [32.230987, -90.1580165], [36.232915, -115.223125], [33.121483999999995, -117.2879235], [40.8081385, -72.757981], [34.0207895, -118.4119065], [41.3175885, -81.552273], [44.4245835, -78.32575299999999], [47.859325, -122.206896], [36.24912449999999, -115.133373], [39.8533665, -104.8695335], [41.588432, -83.565295], [32.819858499999995, -96.7617535], [47.242960499999995, -122.455344], [53.5558195, -113.4926175], [25.976124, -80.307064], [45.145269, -122.85747549999999], [28.529141000000003, -81.1850665], [40.099140000000006, -74.7922845], [27.672917499999997, -82.7238825], [33.24548, -95.9046305], [37.791994, -122.2286855], [34.7519365, -92.13127399999999], [35.2111155, -101.816092], [39.7795625, -86.1429225], [38.77667649999999, -77.1766795], [40.522217, -80.22681349999999], [40.7913595, -74.26299], [36.090396999999996, -79.85736349999999], [32.571032, -89.87644900000001], [42.245713, -83.60180249999999], [35.209058999999996, -80.8467855], [33.7446325, -116.237907], [32.5369, -92.6338345], [39.736027500000006, -90.2320415], [38.003375500000004, -79.42086499999999], [44.900818, -89.5694915], [40.477273499999995, -79.833837], [29.417501, -98.5406515], [29.838495, -95.44648649999999], [49.1299195, -125.8868975], [41.443540999999996, -82.1945345], [34.0207895, -118.4119065], [38.7631605, -121.3007305], [40.9717275, -76.589388], [32.61975, -115.526862], [33.692542, -117.9987325], [32.0172845, -81.1096165], [38.066142, -97.90780699999999], [32.6782075, -83.1738665], [32.7799665, -97.28591349999999], [49.8538055, -97.1526765], [28.7107455, -81.529538], [41.8335845, -87.732013], [32.3879025, -104.239477], [27.986947, -80.65181799999999], [32.3880115, -111.135516], [38.0096245, -122.2589575], [27.698681999999998, -83.804475], [31.1688935, -100.0768885], [40.655138, -73.9487755], [36.786041999999995, -119.7824645], [33.0180735, -96.61846449999999], [32.576227, -86.6807375], [40.780709, -73.9685415], [27.698681999999998, -83.804475], [32.920541, -96.4268065], [35.1704985, -79.861034], [29.417501, -98.5406515], [48.41812, -122.31182100000001], [41.8871295, -87.7899005], [33.900901000000005, -118.0071635], [39.7795625, -86.1429225], [33.061242500000006, -96.7349005], [38.561722, -121.469664], [30.4591, -91.0907995], [38.898602999999994, -77.0143985], [41.5642575, -93.774755], [34.082496500000005, -118.39963900000001], [44.083378499999995, -70.25688099999999], [36.319486, -119.3195265], [33.842863, -117.851089], [38.003375500000004, -79.42086499999999], [31.1104765, -97.4060975], [47.689242, -114.14855299999999], [42.3527865, -83.099288], [36.607196, -79.418222], [36.5509835, -87.3221685], [34.807745, -106.7533895], [42.7430345, -78.8500525], [39.713563, -104.92209349999999], [41.577484, -73.76904250000001], [35.4828435, -97.552161], [27.698681999999998, -83.804475], [42.314732, -83.21355700000001], [40.148988, -82.914538], [33.6311395, -80.926628], [29.982601, -90.011008], [46.758334500000004, -92.12284], [32.810012, -117.104989], [43.052606999999995, -76.1288105], [49.8538055, -97.1526765], [29.982601, -90.011008], [40.8030665, -73.73398449999999], [44.059938, -121.311582], [40.365159500000004, -82.6694675], [26.850421, -80.06200749999999], [27.698681999999998, -83.804475], [41.1179365, -77.60468399999999], [25.7823535, -80.2333285], [26.2047925, -80.23063450000001], [47.119285500000004, -122.296281], [33.1966005, -87.5334065], [27.698681999999998, -83.804475], [39.7393005, -89.2665075], [26.1245075, -80.26351700000001], [35.0919545, -85.242564], [33.943456999999995, -84.35244449999999], [27.698681999999998, -83.804475], [39.137038000000004, -84.53981250000001], [35.84742, -86.40961], [39.499762000000004, -111.54702900000001], [29.838495, -95.44648649999999], [42.036141, -87.893924], [29.0923355, -81.0232725], [33.839611500000004, -118.2480625], [42.036939000000004, -71.683502], [40.365159500000004, -82.6694675], [30.323345500000002, -97.754724], [40.655138, -73.9487755], [33.451088, -112.07918], [39.7795625, -86.1429225], [33.842863, -117.851089], [29.732222, -95.456407], [42.270839499999994, -83.7299715], [41.116703, -74.042766], [32.531603000000004, -94.34845150000001], [32.633767, -117.02246299999999], [34.0207895, -118.4119065], [43.2606955, -79.9135205], [39.577132, -104.8646225], [41.5531175, -84.1413675], [39.713563, -104.92209349999999], [41.679998499999996, -85.9586865], [46.1992915, -119.1759405], [40.1074845, -88.27921900000001], [41.116703, -74.042766], [41.116703, -74.042766], [45.424259500000005, -76.3512045], [34.721886, -92.342322], [38.893409000000005, -119.9873565], [30.937336000000002, -91.40100849999999], [32.364145, -86.24472850000001], [41.116703, -74.042766], [29.898454, -81.3056535]],
                {
                    minOpacity: 0.5,
                    maxZoom: 18,
                    max: 1.0,
                    radius: 15,
                    blur: 15,
                    gradient: null
                    })
                .addTo(map_7bf71ae5bc4c4db7b88ad359c65bf2da);
        
</script>

templates/heatMap.html:
<!DOCTYPE html>
<head>    
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <script>L_PREFER_CANVAS=false; L_NO_TOUCH=false; L_DISABLE_3D=false;</script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.2.0/dist/leaflet.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.2.0/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css"/>
    <link rel="stylesheet" href="https://rawgit.com/python-visualization/folium/master/folium/templates/leaflet.awesome.rotate.css"/>
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    
    <style>#map_c336c4c61f404630ae981ed7c687a250 {
        position: relative;
        width: 100.0%;
        height: 100.0%;
        left: 0.0%;
        top: 0.0%;
        }
    </style>
    <script src="https://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js"></script>
</head>
<body>    
    
    <div class="folium-map" id="map_c336c4c61f404630ae981ed7c687a250" ></div>
</body>
<script>    
    
    
        var bounds = null;
    

    var map_c336c4c61f404630ae981ed7c687a250 = L.map(
        'map_c336c4c61f404630ae981ed7c687a250', {
        center: [53.540996, -113.497746],
        zoom: 10,
        maxBounds: bounds,
        layers: [],
        worldCopyJump: false,
        crs: L.CRS.EPSG3857,
        zoomControl: true,
        });

    
    
    var tile_layer_4f68f6b5474d49fabc75de48b635d902 = L.tileLayer(
        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        {
        "attribution": null,
        "detectRetina": false,
        "maxNativeZoom": 18,
        "maxZoom": 18,
        "minZoom": 0,
        "noWrap": false,
        "subdomains": "abc"
}).addTo(map_c336c4c61f404630ae981ed7c687a250);
    
            var heat_map_d3ef6f4c0e2646d0b3b7e580eaebc603 = L.heatLayer(
                [],
                {
                    minOpacity: 0.2,
                    maxZoom: 1,
                    max: 1.0,
                    radius: 15,
                    blur: 15,
                    gradient: null
                    })
                .addTo(map_c336c4c61f404630ae981ed7c687a250);
        
</script>

templates/index.html:
<html>  
  <head>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.6/socket.io.min.js"></script>
  <script type="text/javascript" charset="utf-8">
      var socket = io.connect('http://' + document.domain + ':' + location.port);
      socket.on('connect', function() {
          setInterval(emitUpdateSignal, 5000);

      });
      function emitUpdateSignal(){
        var theMapIframe = document.getElementById('theMapFrame').contentWindow;
        // mapID = theIframe.document.body.getElementsByClassName("folium-map")[0].id
        var mapID = theMapIframe.document.body.childNodes[1].id;
        var mapObj = theMapIframe[mapID];
        var lat = mapObj.getCenter()["lat"];
        var lon = mapObj.getCenter()["lng"];
        var zoom = mapObj.getZoom();

        //var theMap2Iframe = document.getElementById('theMapFrame2').contentWindow;
        //var map2ID = theMap2Iframe.document.body.childNodes[1].id;
        //var map2Obj = theMap2Iframe[map2ID];

        //map2Obj.setView([lat,lon],zoom);
        //map2Obj.setCenter()["lng"] = lon;
        //map2Obj.setZoom(zoom);

        console.log(mapObj.getCenter()["lng"]);
        console.log(lon);
        //console.log(map2Obj.getCenter()["lng"]);

        socket.emit('mapUpdateEvent', lat, lon, zoom);
      }
      socket.on('mapCreated',function() {
          document.getElementById('theMapFrame').contentWindow.location.reload();
      });
      
  </script>
  </head>
  <body>
    <div>
      

      <iframe id = "theMapFrame" src="/static/heatMap.html" style="position :absolute; top:0; left:0;border: 0; width: 100%; height: 100%"></iframe>
    </div>
  </body>
</html> 

templates/temp.html:


